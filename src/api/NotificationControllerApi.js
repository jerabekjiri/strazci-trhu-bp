/**
 * Spring Boot REST API
 * Employee Management REST API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */



import { HttpRequest } from '../modules/shared/services/http-request.service';
export class NotificationControllerApi extends HttpRequest {

    constructor(api_url) {

      super();

      if (api_url) {
        this.api_url = MySuperApp.back_end_endpoint + api_url;
      } else {
        this.api_url = MySuperApp.back_end_endpoint;
      }
    }

    getBaseUrl() {
      return this.api_url;
    }


    /**
     * getNotifications
     * @param {Number} limit limit
     * @param {Number} offset offset
     * @param {module:api/NotificationControllerApi~getNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageNotification}
     */
    getNotifications(limit, offset, file) {    
      
      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let handleAs = file ? 'blob' : undefined;

      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      var url = this.getBaseUrl() + '/notifications';
      return this.gatewayRequest(url, 'GET', null, queryParams, handleAs, formParams);  
    }

    /**
     * getNotificationsInfo
     * @param {module:api/NotificationControllerApi~getNotificationsInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    getNotificationsInfo(file) {    
      
      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let handleAs = file ? 'blob' : undefined;

      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      var url = this.getBaseUrl() + '/notifications/info';
      return this.gatewayRequest(url, 'GET', null, queryParams, handleAs, formParams);  
    }

    /**
     * patchNotificationAsRead
     * @param {Number} id id
     * @param {module:api/NotificationControllerApi~patchNotificationAsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntity}
     */
    patchNotificationAsRead(id, file) {    
      
        // verify the required parameter 'id' is set
        if (!id) {
            throw new Error('Compulsory parameter id is missing (patchNotificationAsRead).');
        }
      
      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let handleAs = file ? 'blob' : undefined;

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      var url = this.getBaseUrl() + '/notifications/{id}/mark-as-read'
            .replace('{' + 'id' + '}', String(id));
      return this.gatewayRequest(url, 'PATCH', null, queryParams, handleAs, formParams);  
    }


  buildCollectionParam (param, collectionFormat) {
    if (!param) {
      return null;
    }
    switch (collectionFormat) {
      case 'csv':
        return param.join(',');
      case 'ssv':
        return param.join(' ');
      case 'tsv':
        return param.join('\t');
      case 'pipes':
        return param.join('|');
      case 'multi':
        // return the array directly as SuperAgent will handle it as expected
        return param;
      default:
        throw new Error('Unknown collection format: ' + collectionFormat);
    }
  };

}

